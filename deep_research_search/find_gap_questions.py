"""Module use to find the gap questions that will lead to the search of the gap knowledge required to answer a specific question."""
import json

from deep_research_search.logger import logger
from deep_research_search.utils import query_ollama
from deep_research_search.output_formats import GapQuestionsGenerationOutputFormat
from deep_research_search.prompts import GENERATING_GAP_QUESTIONS_PROMPT

def find_gap_questions(memory, question_to_answer):
    """
    Identifies gaps in knowledge using a local LLM (via OLlama) and returns gap questions.

    Args:
        memory (dict): The current in-memory knowledge state containing at least:
                       - "knowledge": a list of gathered knowledge items.
        question_to_answer (str): The actual question to use to find the gap knowledge that will be used to answer it.

    Returns:
        list: A list of gap questions (strings) generated by the LLM.
              If no gaps are found or an error occurs, returns an empty list.

    Role:
        This function builds a prompt using the initial query and the aggregated text from all 
        collected knowledge. It then queries the LLM (via the query_ollama function) to identify
        any missing information and formulate follow-up (gap) questions.
    """
    # Aggregate all collected knowledge text.
    #aggregated_text = " ".join([item["text"] for item in memory.get("knowledge", [])])
    
    # Build the prompt for the LLM.
    #prompt = GENERATING_GAP_QUESTIONS_PROMPT.format(question_to_answer=question_to_answer, aggregated_text= aggregated_text)
    prompt = GENERATING_GAP_QUESTIONS_PROMPT.format(question_to_answer=question_to_answer)
    
    # Query the LLM using OLlama.
    try:
        response = query_ollama(prompt=prompt, output_format=GapQuestionsGenerationOutputFormat)
        # The response is expected to be a JSON array of strings.
        if isinstance(response, str):
            gap_questions = list(json.loads(response).get("gap_questions", []))
        else:
            gap_questions = []
    except Exception as e:
        print(f"Error querying gap questions: {e}")
        gap_questions = []
    
    logger.debug(f"Here are the generated gap question: {gap_questions}\n")
    return gap_questions